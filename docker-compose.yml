
volumes:
  postgres_data:
  django_media:
  django_static:

services:
  reverse-proxy:
    image: nginx:1.27.3
    restart: always
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/templates
      - django_media:/backend/jarcode/media
      - django_static:/backend/jarcode/static
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    environment:
      DJANGO_PORT: ${DJANGO_PORT}
      VUE_PORT: ${VUE_PORT}

  frontend:
    build:
      context: ./frontend
    volumes:
      - /app/node_modules
      - ./frontend:/app
    ports:
      - "5173:${VUE_PORT}"
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port ${VUE_PORT}"
    depends_on:
      backend:
        condition: service_started

  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5673:${RABBITMQ_AMQP_PORT}"
      - "15673:${RABBITMQ_UI_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: jarcode-backend:latest
    build:
      context: ./backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_AMQP_PORT: ${RABBITMQ_AMQP_PORT}
      RABBITMQ_UI_PORT: ${RABBITMQ_UI_PORT}
      DJANGO_PORT: ${DJANGO_PORT}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    volumes:
      - ./backend/jarcode:/app/jarcode
      - django_media:/app/jarcode/media
      - django_static:/app/jarcode/static
    command: >
      sh -c "python manage.py migrate
      && python manage.py collectstatic --no-input
      && python manage.py runserver 0.0.0.0:${DJANGO_PORT}"
    ports:
      - "8000:${DJANGO_PORT}"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    image: jarcode-backend:latest
    build:
      context: ./backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_AMQP_PORT: ${RABBITMQ_AMQP_PORT}
      RABBITMQ_UI_PORT: ${RABBITMQ_UI_PORT}
      DJANGO_PORT: ${DJANGO_PORT}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    volumes:
      - ./backend/jarcode:/app/jarcode
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "python manage.py rundramatiq"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:latest
    command: ["redis-server"]
    ports:
      - "6379:${REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
